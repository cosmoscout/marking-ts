import MenuItem from './menu-item';
import { ClickState } from '../enums';
import { SliderDefinition } from '../interfaces/slider-definition';
import { MenuItemDefinition } from '../interfaces/menu-item-definition';
import { DragDefinition } from '../interfaces/drag-definition';
export default class Ribbonslider extends MenuItem {
    readonly TYPE = "ribbonslider";
    private _ribbonGroup;
    private _ribbon;
    private _gradient;
    private _grabDot;
    private _ribbonMaskGroup;
    private _configuration;
    private _value;
    private prevDragPosition;
    private dragging;
    private childIndicator;
    private done;
    constructor(id: string, angle: number, text: string, icon?: string);
    get isLeaf(): boolean;
    get configuration(): SliderDefinition;
    set data(data: any);
    set value(value: number);
    get value(): number;
    private get ribbonGroup();
    private get ribbon();
    private get grabDot();
    private get gradient();
    private get ribbonMaskGroup();
    moveRibbonToValuePosition(value: number, animated?: boolean): void;
    toJSON(): MenuItemDefinition;
    protected setupGeometry(): void;
    protected preSetup(): void;
    protected afterSetup(): void;
    protected getNearestChild(): MenuItem;
    protected traceLogic(): void;
    protected dragLogic(drag: DragDefinition): void;
    protected clickLogic(clickState: ClickState): void;
    protected selectionLogic(angle: number): void;
    private getPositionToTest;
    protected selectionLogicHoverOperations(): void;
    protected setGroupsVisibility(): void;
    protected animateStateActive(): void;
    protected selectionLogicBackOperations(): void;
    protected itemReady(): void;
    protected collectArcAngles(): void;
    protected stateChanged(): void;
    protected selectionLogicInGeometryOperations(): void;
    protected setGeometryColorDefault(): void;
    protected setGeometryColorSelected(): void;
    protected getChildren(): Array<MenuItem>;
    private inSnappingRange;
    private setupRibbon;
    private setupRibbonContent;
    private setupGradient;
    private setupGrabDotSymbol;
    private createMask;
    private getRibbonLength;
    private getPrecision;
    private updateRibbonPosition;
    private throttledTextUpdate;
}
