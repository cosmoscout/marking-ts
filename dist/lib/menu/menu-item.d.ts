import { Observable, Subject, Subscription } from "rxjs";
import Settings from "../settings";
import { ClickState, ItemState, MenuItemEventType } from "../enums";
import { AnimationGroup } from "../../utlis/animation";
import { ArcDefinition, DragDefinition, MenuData, MenuEventDefinition, MenuIdentifier, MenuItemDefinition } from "../interfaces";
import Base from "./base";
export default class MenuItem extends Base implements MenuIdentifier {
    protected static readonly ICON_BG_OPACITY: number;
    protected static readonly TEXT_OVERFLOW_SCALE: number;
    readonly itemId: string;
    readonly textContent: string;
    readonly angle: number;
    protected _iconName: string | undefined;
    readonly isRoot: boolean;
    protected _state: ItemState;
    protected needsReDraw: boolean;
    protected ready: boolean;
    protected readonly geometryGroup: paper.Group;
    protected readonly arcGroup: paper.Group;
    protected readonly lineGroup: paper.Group;
    protected arcs: Array<ArcDefinition>;
    protected _text: paper.PointText | undefined;
    protected _geometry: paper.Path | undefined;
    protected _selectionRadius: paper.Path | undefined;
    protected _connector: paper.Path.Line | undefined;
    protected _icon: paper.CompoundPath | undefined;
    protected isInBackNavigationArc: boolean;
    protected activeChild: MenuItem | undefined;
    protected hoveredChild: MenuItem | undefined;
    protected parentArc: ArcDefinition | undefined;
    protected subscription: Subscription | undefined;
    protected readonly _selectionSubject$: Subject<MenuEventDefinition>;
    protected readonly _selectionObservable$: Observable<MenuEventDefinition>;
    protected _inputAngle$: Observable<number> | undefined;
    protected readonly _animations: AnimationGroup;
    protected _menu: MenuData | undefined;
    protected _settings: Settings | undefined;
    protected _positionChild: paper.Point | undefined;
    protected _positionDot: paper.Point | undefined;
    protected _prevEvent: MenuEventDefinition | undefined;
    constructor(id: string, angle: number, text: string, icon?: string, isRoot?: boolean);
    init(): void;
    get selection$(): Observable<MenuEventDefinition>;
    get menu(): MenuData;
    set menu(events: MenuData);
    get settings(): Settings;
    set settings(settings: Settings);
    get state(): ItemState;
    set state(state: ItemState);
    get isLeaf(): boolean;
    get childCount(): number;
    redraw(): void;
    protected stateChanged(): void;
    protected setGroupsVisibility(): void;
    protected addSubscriptions(): void;
    protected set iconName(icon: string | undefined);
    protected get iconName(): string | undefined;
    get connector(): paper.Path.Line;
    protected get inputAngle$(): Observable<number>;
    protected get root(): MenuItem;
    protected get geometry(): paper.Path.Circle;
    protected get icon(): paper.CompoundPath;
    protected get text(): paper.PointText;
    protected get positionChild(): paper.Point;
    protected get positionDot(): paper.Point;
    protected get selectionRadius(): paper.Path.Circle;
    protected setupGroups(): void;
    protected setupConnector(): void;
    protected setupGeometry(): void;
    protected setupIcon(): void;
    protected setupText(): void;
    protected setupSelectionRadius(): void;
    protected getChildren(): Array<MenuItem>;
    protected getNearestChild(angle: number): MenuItem;
    protected updateText(content: string): void;
    protected angleToReferencePoint(point: paper.Point): number;
    protected navigateBack(): void;
    protected changeActive(): void;
    protected selectedEvent(): void;
    protected event(type: MenuItemEventType, target?: MenuItem, data?: Record<string, string | number | boolean>): void;
    protected reset(): void;
    protected stopAnimations(): void;
    protected resetActiveHovered(): void;
    protected collectArcAngles(): void;
    protected createArcs(): void;
    protected resetChildColor(): void;
    protected selectionLogic(angle: number): void;
    protected selectionLogicInGeometryOperations(): void;
    protected selectionLogicBackOperations(): void;
    protected selectionLogicHoverOperations(nearestChild: MenuItem): void;
    protected clickLogic(clickState: ClickState): void;
    protected traceLogic(decisionPoint: paper.Point): void;
    protected dragLogic(drag: DragDefinition): void;
    protected drawItem(): void;
    protected itemReady(): void;
    protected preSetup(): void;
    protected afterSetup(): void;
    protected setGeometryColorDefault(): void;
    protected setGeometryColorSelected(): void;
    protected setGeometryColorActiveSelected(): void;
    protected setGeometryColorHovered(): void;
    protected setTextColorDefault(): void;
    protected setTextColorSelected(): void;
    protected setTextColorActiveSelected(): void;
    protected setTextColorHovered(): void;
    protected setIconColorDefault(): void;
    protected setIconColorSelected(): void;
    protected setIconColorActiveSelected(): void;
    protected setIconColorHovered(): void;
    protected setColorDefault(): void;
    protected setColorSelected(): void;
    protected setColorActiveSelected(): void;
    protected setColorHovered(): void;
    toString(): string;
    toJSON(): MenuItemDefinition;
    protected animateStateHidden(): void;
    protected animateStateActive(): void;
    protected animateStateChild(): void;
    protected animateStateParent(): void;
    protected animateStateDot(): void;
    protected animateStateBack(): void;
    protected animateStateBackChild(): void;
    protected animateStateSubmenu(): void;
    protected animateStateSelected(): void;
    protected animateStateActiveSelection(): void;
    protected animateArcs(angle: number): void;
}
